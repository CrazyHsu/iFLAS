#!/bin/env perl

use strict;
use Getopt::Long;
use File::Basename;
use lib dirname $0;
use pm::common;

my ($juncFile, $refFile, $bin);
GetOptions(
            'j|junc=s'  => \$juncFile,
            'r|ref=s'   => \$refFile,
            'b|bin'     => \$bin,
            'h|help'    => sub{usage()}
        ) || usage();

$ARGV[0] = '-' unless defined $ARGV[0];
open IN, "$ARGV[0]" or die "Can't open $ARGV[0]: $!";

my %scoreHash;
while(<IN>){
    chomp;
    next if /^#/;
    my ($chr, $start, $strand, $blockSizes, $blockRelStarts) = (split "\t")[0, 1, 5, 10, 11];
    my @blockSizes = split ",", $blockSizes;
    my @blockRelStarts = split ",", $blockRelStarts;
    my ($blockStarts, $blockEnds) = &common::getAbsLoc($start, \@blockSizes, \@blockRelStarts);
    my ($juncStarts, $juncEnds) = &common::getIntrons($blockStarts, $blockEnds);
    next if @$juncStarts == 0;
    for(my $i = 0; $i < @$juncStarts; $i++){
        if(exists $scoreHash{"$chr:$juncStarts->[$i]-$juncEnds->[$i]:$strand"}{lScore}){
            $scoreHash{"$chr:$juncStarts->[$i]-$juncEnds->[$i]:$strand"}{lScore}++;
        }else{
            $scoreHash{"$chr:$juncStarts->[$i]-$juncEnds->[$i]:$strand"}{lScore} = 1;
        }
    }
}

if(defined $juncFile){
    open JUNC, "$juncFile" or die "Can't open $juncFile: $!";
    while(<JUNC>){
        chomp;
        next if /^track/;
        my ($chr, $start, $end, $score, $strand, $blockSizes) = (split "\t")[0, 1, 2, 4, 5, 10];
        my @blockSizes = split ",", $blockSizes;
        my $juncStart = $start + $blockSizes[0];
        my $juncEnd = $end - $blockSizes[1];
        if(exists $scoreHash{"$chr:$juncStart-$juncEnd:$strand"}{jScore}){
            $scoreHash{"$chr:$juncStart-$juncEnd:$strand"}{jScore} += $score;
        }else{
            $scoreHash{"$chr:$juncStart-$juncEnd:$strand"}{jScore} = $score;
        }
    }
}

if(defined $refFile){
    open REF, "$refFile" or die "Can't open $refFile: $!";
    while(<REF>){
        chomp;
        my @fields = split "\t";
        shift @fields if defined $bin;
        my ($chr, $strand, $exonStarts, $exonEnds) = @fields[1, 2, 8, 9];
        my @exonStarts = split ',', $exonStarts;
        my @exonEnds = split ',', $exonEnds;
        my ($juncStarts, $juncEnds) = &common::getIntrons(\@exonStarts, \@exonEnds);
        for(my $i = 0; $i < @$juncStarts; $i++){
            if(exists $scoreHash{"$chr:$juncStarts->[$i]-$juncEnds->[$i]:$strand"}{rScore}){
                $scoreHash{"$chr:$juncStarts->[$i]-$juncEnds->[$i]:$strand"}{rScore}++;
            }else{
                $scoreHash{"$chr:$juncStarts->[$i]-$juncEnds->[$i]:$strand"}{rScore} = 1;
            }
        }
    }
}

for my $junc (keys %scoreHash){
    my ($chr, $juncLoc, $strand) = split ":", $junc;
    my ($juncStart, $juncEnd) = split "-", $juncLoc;
    print join "\t", ($chr, $strand, $juncStart, $juncEnd);
    print "\t";
    if(exists $scoreHash{$junc}{lScore}){
        print $scoreHash{$junc}{lScore};
    }
    print "\t";
    if(exists $scoreHash{$junc}{jScore}){
        print $scoreHash{$junc}{jScore};
    }
    print "\t";
    if(exists $scoreHash{$junc}{rScore}){
        print $scoreHash{$junc}{rScore};
    }
    print "\n";
}

sub usage{
    my $scriptName = basename $0;
print <<HELP;
Usage: perl $scriptName -j junctions.bed -b -r hg18.refGene.gpe spliced.bed12+ >juncScoring.bed
    If spliced.bed12+ isn't specified, input from STDIN
    Scores will be appended to input entry in the order of lScore (from spliced.bed12+), jScore (from junctions.bed ) and rScore (from hg18.refGene.gpe).
Options:
    -j --junc   FILE    (Optional) The junctions.bed file (generated by tophat)
    -r --ref    FILE    (Optional) The gene model reference file in gpe format
    -b --bin            With bin column in refFile
    -h --help           Print this help information
HELP
    exit(-1);
}